[{"/Users/kube/Personal Projects/fake-imdb/src/index.js":"1","/Users/kube/Personal Projects/fake-imdb/src/App.js":"2","/Users/kube/Personal Projects/fake-imdb/src/reportWebVitals.js":"3","/Users/kube/Personal Projects/fake-imdb/src/globalState.js":"4","/Users/kube/Personal Projects/fake-imdb/src/components/header/Header.js":"5","/Users/kube/Personal Projects/fake-imdb/src/components/actor/Actor.js":"6","/Users/kube/Personal Projects/fake-imdb/src/components/show/Show.js":"7","/Users/kube/Personal Projects/fake-imdb/src/components/home/Home.js":"8","/Users/kube/Personal Projects/fake-imdb/src/components/footer/Footer.js":"9","/Users/kube/Personal Projects/fake-imdb/src/components/featureSelect/FeatureSelect.js":"10","/Users/kube/Personal Projects/fake-imdb/src/components/topSix/TopSix.js":"11"},{"size":666,"mtime":1609366075057,"results":"12","hashOfConfig":"13"},{"size":1169,"mtime":1612412470484,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1609011833835,"results":"15","hashOfConfig":"13"},{"size":1898,"mtime":1612475044833,"results":"16","hashOfConfig":"13"},{"size":2810,"mtime":1612489779769,"results":"17","hashOfConfig":"13"},{"size":7508,"mtime":1612489779768,"results":"18","hashOfConfig":"13"},{"size":7763,"mtime":1612489779769,"results":"19","hashOfConfig":"13"},{"size":412,"mtime":1612486606515,"results":"20","hashOfConfig":"13"},{"size":685,"mtime":1612485556623,"results":"21","hashOfConfig":"13"},{"size":3516,"mtime":1612489779769,"results":"22","hashOfConfig":"13"},{"size":3728,"mtime":1612489779770,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1rds6am",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/kube/Personal Projects/fake-imdb/src/index.js",[],["52","53"],"/Users/kube/Personal Projects/fake-imdb/src/App.js",[],"/Users/kube/Personal Projects/fake-imdb/src/reportWebVitals.js",[],"/Users/kube/Personal Projects/fake-imdb/src/globalState.js",[],"/Users/kube/Personal Projects/fake-imdb/src/components/header/Header.js",["54","55","56","57","58"],"import React, { Fragment } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { searchName, image, displayName, knownFor, actorId, notActor, responseData} from '../../globalState.js'\nimport axios from 'axios'\nimport './header.css'\nimport purpleLogo from '../../images/fanatic-logo-2.png'\n\n\nfunction Header () {\n\n    const [useSearchName, setuseSearchName] = useRecoilState(searchName)\n    const [useImage, setuseImage] = useRecoilState(image)\n    const [useDisplayname, setuseDisplayname] = useRecoilState(displayName)\n    const [useKnownFor, setuseKnownFor] = useRecoilState(knownFor)\n    const [useActorId, setuseActorId] = useRecoilState(actorId)\n    const [useIsNotActor, setisNotActor] = useRecoilState(notActor)\n    const [useResponseData, setuseResponseData] = useRecoilState(responseData)\n\n    // Initial call from user search\n    const fakeImdbSearch = () => {\n        const options = {\n            method: 'GET',\n            url: 'https://imdb8.p.rapidapi.com/title/auto-complete',\n            params: {q: useSearchName},\n            headers: {\n             'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n             'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n            }\n        };\n  \n        axios.request(options).then(function (response) {\n            setuseSearchName(response.data.d[0].l)\n            setuseImage(response.data.d[0].i.imageUrl)\n            setuseDisplayname(response.data.d[0].l)\n            setuseKnownFor(response.data.d[0].s)\n            setuseResponseData(response.data)\n            \n            if(response.data.d[0].id.substr(0, 2) === 'nm'){\n              setuseActorId(response.data.d[0].id)\n            } else if(useActorId !== ''){\n              setuseActorId('')\n            }\n\n            let movieOrShow = response.data.d[0].q\n            if (movieOrShow) {\n                setisNotActor(movieOrShow)\n                setuseSearchName('')\n            } else {\n                setisNotActor('actor')\n                setuseSearchName('')\n            }\n\n            }).catch(function (error) {\n            console.error(error)\n            });\n          \n        clearSearch()\n    }\n  \n    const handleChange = event => {\n      setuseSearchName(event.target.value)\n    }\n\n    const clearSearch = () => {\n      document.getElementById('search').value = ''\n    }\n    \n    return(\n    <Fragment>\n    <header>\n      <a href='/'>\n        <img src={purpleLogo} id='fanLogo' alt='Fanatic Logo'/>\n      </a>\n        <div id='searchBB'>\n          <input id='search' type='text' placeholder='search movie, actor' onChange = {handleChange}></input>\n          <button id='searchButton' onClick={fakeImdbSearch}>SEARCH</button>\n        </div>\n    </header>\n      <h1>SEARCH TV, MOVIES AND ACTORS</h1>\n    </Fragment>\n    )\n\n}\nexport default Header","/Users/kube/Personal Projects/fake-imdb/src/components/actor/Actor.js",["59","60"],"import React, { useEffect } from 'react'\nimport './Actor.css'\nimport { useRecoilState } from 'recoil'\nimport { searchName, image, displayName, knownFor, actorId, actorImages, actorBio, actorFilmography, actorSelect} from '../../globalState.js'\nimport noPoster from '../../images/no_poster.png'\nimport leftButton from '../../images/arrow-left.png'\nimport rightButton from '../../images/arrow-right.png'\nimport scrollButtonDivider from '../../images/arrow-spacer.png'\nimport axios from 'axios'\n\n\nfunction Actor () {\n\n    const [useSearchName] = useRecoilState(searchName)\n    const [useImage] = useRecoilState(image)\n    const [useDisplayName] = useRecoilState(displayName)\n    const [useKnownFor] = useRecoilState(knownFor)\n    const [useActorId] = useRecoilState(actorId)\n    const [useActorImages, setuseActorImages] = useRecoilState(actorImages)\n    const [useActorbio, setuseActorBio] = useRecoilState(actorBio)\n    const [useActorFilmography, setuseActorFilmography] = useRecoilState(actorFilmography)\n    const [useActorSelect, setuseActorSelect] = useRecoilState(actorSelect)\n\n\n    useEffect (() => {\n      if(useActorId.substr(0, 2) === 'nm'){\n      document.title = `FANatic - ${useDisplayName}`\n\n    // Call to get Actor bio info\n    const getBio = () => {\n\n      const options = {\n        method: 'GET',\n        url: 'https://imdb8.p.rapidapi.com/actors/get-bio',\n        params: {nconst: useActorId},\n        headers: {\n          'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n          'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n        }\n        \n      };\n      \n      axios.request(options).then(function (response) {\n        setuseActorBio(response.data.miniBios[0].text)\n      }).catch(function (error) {\n        console.error(error);\n      });\n\n    }\n    getBio()\n\n\n    // Call to retrieve filmography\n    const getFilmography = () => {\n      const options = {\n        method: 'GET',\n        url: 'https://imdb8.p.rapidapi.com/actors/get-all-filmography',\n        params: {nconst: useActorId},\n        headers: {\n          'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n          'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n        }\n      };\n      \n      axios.request(options).then(function (response) {\n        let allFilmography = response.data.filmography\n        setuseActorFilmography(allFilmography)\n        setuseActorSelect('')\n        \n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n    getFilmography()\n\n    //Retrieves all actor images\n    const allImages = () => {\n      const options = {\n        method: 'GET',\n        url: 'https://imdb8.p.rapidapi.com/actors/get-all-images',\n        params: {nconst: useActorId},\n        headers: {\n          'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n          'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n        }\n      };\n      \n      axios.request(options).then(function (response) {\n        setuseActorImages(response.data.resource.images)\n      }).catch(function (error) {\n        console.error(error)\n      });\n    }\n    allImages()\n  }\n  }, [useActorId])\n\n    const DisplayImages = () => {\n        let imageList = []\n        if (useActorImages.length > 50){\n          for(let image = 0; image < 50; image++){\n            imageList.push(<img key={ image } className='actorImages' alt={ useActorImages[image].caption } src={ useActorImages[image].url }></img>)\n          }\n        }\n        else {\n          for(let image = 0; image < useActorImages.length; image++){\n            imageList.push(<img key={ image } className='actorImages' alt={ useActorImages[image].caption } src={ useActorImages[image].url }></img>)\n          }\n        }\n        return imageList\n      }\n\n    const DisplayFilmography = () => {\n      let titleAndRole = []\n      for(let role = 0; role < useActorFilmography.length; role++){\n        if (useActorFilmography[role].image){\n            titleAndRole.push(<div className='character'>\n                                <h6 className='title' key={ useActorFilmography[role].title }>{useActorFilmography[role].title}</h6>\n                                <h6 className='role' key={ useActorFilmography[role].characters }>{useActorFilmography[role].characters}</h6>\n                                <img key={ role } className='roleImage' alt= {useActorFilmography[role].characters} src={ useActorFilmography[role].image.url}></img>\n                                <h6 className='status' key={ -role - 1 }>{useActorFilmography[role].status}</h6>\n                              </div>)\n        } else {\n          titleAndRole.push(<div className='character'><h6 className='title'>{useActorFilmography[role].title}</h6><h6 className='role'>{useActorFilmography[role].characters}</h6><img key={ role } className='roleImage' alt= {useActorFilmography[role].characters} src={ noPoster } ></img><h6 className='status'>{useActorFilmography[role].status}</h6></div>)\n        }\n      }\n      return titleAndRole\n    }\n\n    const LeftScroll = () => {\n      document.getElementById('roles').scrollLeft -= 500\n    }\n\n    const RightScroll = () => {\n      document.getElementById('roles').scrollLeft += 500\n    }\n\n    const LeftScroll2 = () => {\n      document.getElementById('allImages').scrollLeft -= 500\n    }\n\n    const RightScroll2 = () => {\n      document.getElementById('allImages').scrollLeft += 500\n    }\n\n    return (\n        <div id='actorInfo'>\n            <div id='allBio'>\n                <div id='bio'>\n                <div id='imageHolder'>\n                  <div id='name'>\n                    <h2 id='knownFor1'>{useKnownFor.split(',')[0]}</h2>\n                    <h2 id='searchName'>{useDisplayName.split('(')[0]}</h2>\n                  </div>\n                  <img id='searchImage' src={useImage} alt={'Picture of ' + useSearchName}></img>\n                </div>\n                <div id='bioText'>\n                    <h2 id='knownForText'>Known For</h2>\n                    <h2 id='knownFor2'>{useKnownFor.split(',')[1]}</h2>\n                    <div id=\"personalBio\">\n                      <p id='actorBio'>{useActorbio}</p>\n                    </div>\n                </div>\n                </div>\n            </div>\n            <h2 id='filmographyTitle'>Filmography</h2>\n            <div id='filmography'>\n              <div id='roles'>\n                <DisplayFilmography />\n              </div>\n            </div>\n            <div id='filmScrollArrow'>\n              <button id='leftScroll1' onClick={ LeftScroll }><img id='leftButton1' src={ leftButton } alt='left scroll button' /></button>\n              <img id='arrowSpacer' alt='scroll button divider' src={scrollButtonDivider} />\n              <button id='rightScroll1' onClick={ RightScroll }><img id='rightButton1' src={rightButton} alt='right scroll button' /></button>\n            </div>\n            <h2 id='actorImages'>Images of {useDisplayName.split('(')[0]}</h2>\n            <div id='allImages'>\n                <DisplayImages />\n            </div>\n            <div id='filmScrollArrow'>\n              <button id='leftScroll1' onClick={ LeftScroll2 }><img id='leftButton1' src={ leftButton } alt='left scroll button' /></button>\n              <img id='arrowSpacer' alt='scroll button divider' src={scrollButtonDivider} />\n              <button id='rightScroll1' onClick={ RightScroll2 }><img id='rightButton1' src={rightButton} alt='right scroll button' /></button>\n            </div>\n        </div>\n    )\n}\n\nexport default Actor","/Users/kube/Personal Projects/fake-imdb/src/components/show/Show.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React, { useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { image, displayName, actorId, genres, rating, plot, rated, topBilled, ratedBecause, runShow,\n         runTopSix, topDisplayReady, topSix, notActor, searchName, knownFor, responseData, trailer, trailerId, actorSelect} from '../../globalState.js'\nimport './show.css'\nimport axios from 'axios'\nimport Iframe from 'react-iframe'\n\n\nfunction Show () {\n    const [useDisplayName, setuseDisplayName] = useRecoilState(displayName)\n    const [useImage, setuseImage] = useRecoilState(image)\n    const [useActorId, setuseActorId] = useRecoilState(actorId)\n    const [useGenres, setuseGenres] = useRecoilState(genres)\n    const [useRating, setuseRating] = useRecoilState(rating)\n    const [usePlot, setusePlot] = useRecoilState(plot)\n    const [useRated, setuseRated] = useRecoilState(rated)\n    const [useTopBilled, setuseTopBilled] = useRecoilState(topBilled)\n    const [useRatedBecause, setuseRatedBecause] = useRecoilState(ratedBecause)\n    const [useRunShow, setuseRunShow] = useRecoilState(runShow)\n    const [useRunTopSix, setuseRunTopSix] = useRecoilState(runTopSix)\n    const [useTopDisplayReady, setuseTopDisplayReady] = useRecoilState(topDisplayReady)\n    const [useTopSix, setuseTopSix] = useRecoilState(topSix)\n    const [useNotActor, setuseNotActor] = useRecoilState(notActor)\n    const [useSearchName, setuseSearchName] = useRecoilState(searchName)\n    const [useKnownFor, setuseKnownFor] = useRecoilState(knownFor)\n    const [useResponseData, setuseResponseData] = useRecoilState(responseData)\n    const [useTrailer, setuseTrailer] = useRecoilState(trailer)\n    const [useActorSelect, setuseActorSelect] = useRecoilState(actorSelect)\n    // const [useTrailerId, setuseTrailerId] = useRecoilState(trailerId)\n\n    \n\n    useEffect(() => {\n    const getMovieInfo = async() => {\n        if(useActorId.substr(0, 2) === 'tt'){\n            document.title = `FANatic - ${useDisplayName}`\n            //Gets basic movie info\n            const options = {\n                method: 'GET',\n                url: 'https://imdb8.p.rapidapi.com/title/get-overview-details',\n                params: {tconst: useActorId.split('/')[0], currentCountry: 'US'},\n                headers: {\n                'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n                'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n                }\n            };\n      \n            axios.request(options).then(function (response) {\n                setuseImage(response.data.title.image.url)\n                setuseGenres(response.data.genres)\n                setuseRating(response.data.ratings.rating)\n                setusePlot(response.data.plotOutline.text)\n                setuseDisplayName(response.data.title.title)\n                setuseRated(response.data.certificates.US[0].certificate)\n                setuseRatedBecause(response.data.certificates.US[0].ratingReason)\n                setuseSearchName('')\n\n            }).catch(function (error) {\n                console.error(error);\n            });\n        }\n\n        let trailerId\n        if(useResponseData.d[useActorId.split('/')[1]].v){\n            trailerId = useResponseData.d[useActorId.split('/')[1]].v[0].id\n        } else {\n            trailerId = ''\n        }\n        console.log(trailerId)\n        if(trailerId !== ''){\n        const options = {\n            method: 'GET',\n            url: 'https://imdb8.p.rapidapi.com/title/get-video-playback',\n            params: {viconst: trailerId, region: 'US'},\n            headers: {\n              'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n              'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n            }\n          };\n          \n          axios.request(options).then(function (response) {\n              console.log(response.data.resource.encodings[1].playUrl);\n              setuseTrailer(response.data.resource.encodings[1].playUrl)\n          }).catch(function (error) {\n              console.error(error);\n          });\n        }\n        \n    }\n    getMovieInfo()\n    }, [])\n\n\n    //Display all list genres of the movie\n    const DisplayGenres = () => {\n        let genresList = []\n        for(let g = 0; g < useGenres.length; g++){\n            genresList.push(\n                <h2 className='genreType' key={ useGenres[g] }>{useGenres[g]}</h2>\n            )\n        }\n        return genresList\n    } \n    \n    \n    //Display 6 top billed actors\n    const DisplayTopBilled = () => {\n        console.log('hello')\n        let actorDisplay = []\n        \n        for(let actor = 0; actor < useRunTopSix.length; actor++){\n            let actorImg = useRunTopSix[actor][1]\n            let actorName = useRunTopSix[actor][0]\n            let charId = useRunTopSix[actor][2]\n        \n            actorDisplay.push(\n                <div className='topActor' key={ actorName + actor }>\n                    <img className='topImage' id={ actorName } key={ actor } src={ actorImg } alt='Top billed actors' onClick={ GetActor } />\n                    <h2 className='topName' key={ actorName }>{ actorName }</h2>\n                </div>\n            )\n        }\n        \n        setuseTopDisplayReady(true)\n        console.log(actorDisplay,'actor display')\n        return actorDisplay\n    }\n\n\n    const sleep = (milliseconds) => {\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\n      }  \n    \n    \n    const GetActor = e => {\n\n        let actorsName = e.target.id\n    \n        const options = {\n            method: 'GET',\n            url: 'https://imdb8.p.rapidapi.com/title/auto-complete',\n            params: {q: actorsName},\n            headers: {\n             'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n             'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n            }\n        };\n  \n        axios.request(options).then(function (response) {\n            setuseSearchName(response.data.d[0].l)\n            setuseImage(response.data.d[0].i.imageUrl)\n            setuseDisplayName(response.data.d[0].l)\n            setuseKnownFor(response.data.d[0].s)\n            setuseResponseData(response.data)\n            \n            if(response.data.d[0].id.substr(0, 2) === 'nm'){\n              setuseActorId(response.data.d[0].id)\n            } else if(useActorId !== ''){\n              setuseActorId('')\n            }\n\n            let movieOrShow = response.data.d[0].q\n            if (movieOrShow) {\n                setuseNotActor(movieOrShow)\n            } else {\n                setuseNotActor('actor')\n                \n            }\n\n            }).catch(function (error) {\n            console.error(error)\n            });\n              \n    }\n\n    return(\n        <div id='fullInfo'>\n            <div id='titleHolder'>\n                <h1 id='movieTitle'>{ useDisplayName }</h1>\n            </div>\n            <div id='movieInfo'>\n                <div id='posterNRatings'>\n                    <img id='moviePoster' alt='moviePoster' src={ useImage } />\n                    <h2 id='imdbRating'>IMDb Rating</h2>\n                    <h2 id='userRating'>{useRating} / 10</h2>\n                </div>\n                <div id='movieData'>\n                    <div id='genreDisplay'>\n                        <DisplayGenres />\n                    </div>\n                    <Iframe id='trailer' url={ useTrailer } allowFullScreen='true' height='100%' width='100%'/>\n                    <p id='plot'>{usePlot}</p>\n                    <h2 id='rated'>Rated {useRated}</h2>\n                    <p id='ratedReason'>{useRatedBecause}</p>\n                </div>\n            </div>\n            <div id='actorImages2'>\n                <DisplayTopBilled />\n            </div>\n        </div>\n    )\n}\n\nexport default Show","/Users/kube/Personal Projects/fake-imdb/src/components/home/Home.js",[],"/Users/kube/Personal Projects/fake-imdb/src/components/footer/Footer.js",[],"/Users/kube/Personal Projects/fake-imdb/src/components/featureSelect/FeatureSelect.js",["78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"import React from 'react'\nimport { useRecoilState } from 'recoil'\nimport { responseData } from '../../globalState'\nimport './featureSelect.css'\nimport noPoster from '../../images/no_poster.png'\nimport {actorId, notActor, runShow, topBilled, topSix, topDisplayReady, runTopSix, trailerId, trailer} from '../../globalState.js'\n\nfunction FeatureSelect () {\n    const [useResponseData] = useRecoilState(responseData)\n    const [useActorId, setuseActorId] = useRecoilState(actorId)\n    const [useNotActor, setuseNotActor] = useRecoilState(notActor)\n    const [useRunShow, setuseRunShow] = useRecoilState(runShow)\n    const [useTopBilled, setuseTopBilled] = useRecoilState(topBilled)\n    const [useTopSix, setuseTopSix] = useRecoilState(topSix)\n    const [useTopDisplayReady, setuseTopDisplayReady] = useRecoilState(topDisplayReady)\n    const [useRunTopSix, setuseRunTopSix] = useRecoilState(runTopSix)\n    const [useTrailerId, setuseTrailerId] = useRecoilState(trailerId)\n    const [useTrailer, setuseTrailer] = useRecoilState(trailer)\n\n\n    setuseTrailer('')\n\n    \n    const QueryCards = () => {\n\n        let dataList = useResponseData.d\n        let queryList = []\n        \n        console.log(dataList)\n        for(let query = 0; query < dataList.length; query++){\n            let poster\n            if(dataList[query].i){\n                poster = dataList[query].i.imageUrl\n            } else {\n                poster = noPoster\n            }\n            if(dataList[query].s){\n                let title = dataList[query].l\n                let year = dataList[query].y\n                let starring1 = dataList[query].s.split(',')[0]\n                let starring2 = dataList[query].s.split(',')[1]\n                let id = dataList[query].id\n            queryList.push(\n                <div className='queryItem'>\n                    <img key={ id } alt='movie poster' className='poster' src={ poster } id={ id + '/' + [query] } onClick={ SelectedMovie }/>\n                    <div className='resultsInfo'>\n                        <h2 className='title2' key={ title }>{ title }</h2>\n                        <h2 className='year' key={ year }>{ year }</h2>\n                        <h2 className='starring' key={ query }>STARRING</h2>\n                        <h2 className='starring1' key={ starring1 }>{ starring1 }</h2>\n                        <h2 className='starring2' key={ starring2 }>{ starring2 }</h2>\n                    </div>\n                </div>\n            )\n            } else {\n                let title = dataList[query].l\n                let year = dataList[query].y\n                let id = dataList[query].id\n                queryList.push(\n                    <div className='queryItem'>\n                        <img key={ id } alt='movie poster' className='poster' src={ poster } id={ id } onClick={ SelectedMovie }/>\n                        <div className='resultsInfo'>\n                            <h2 className='title2' key={ title }>{ title }</h2>\n                            <h2 className='year' key={ year }>{ year }</h2>\n                        </div>\n                    </div>\n                )\n            }\n        }\n        return queryList\n    }\n\n\n    \n    const SelectedMovie = e => {\n        setuseActorId(e.target.id)\n        console.log(e.target.id, 'id')\n        setuseNotActor('getTopSix')\n    }\n \n\n    return (\n        <div id='selectionHolder'>\n            <h1 id='searchResults'>Search Results</h1>\n            <QueryCards />\n        </div>\n    )\n}\n\nexport default FeatureSelect","/Users/kube/Personal Projects/fake-imdb/src/components/topSix/TopSix.js",["93","94","95","96","97","98","99","100","101"],"import React from 'react'\nimport { useRecoilState } from 'recoil'\nimport axios from 'axios'\nimport './topsix.css'\nimport { useEffect } from 'react'\nimport { topBilled, topSix, topDisplayReady, runTopSix, notActor, actorId } from '../../globalState'\nimport purpleKube from '../../images/purplekube.png'\n\n\n\nfunction TopSix () {\n\n    const [useTopBilled, setuseTopBilled] = useRecoilState(topBilled)\n    const [useTopSix, setuseTopSix] = useRecoilState(topSix)\n    const [useTopDisplayReady, setuseTopDisplayReady] = useRecoilState(topDisplayReady)\n    const [useRunTopSix, setuseRunTopSix] = useRecoilState(runTopSix)\n    const [useNotActor, setuseNotActor] = useRecoilState(notActor)\n    const [useActorId, setuseActorId] = useRecoilState(actorId)\n        \n    \n    \n     //Gets Top cast\n     useEffect(() => {\n         console.log(useActorId.substr(0, 2))\n        if(useActorId.substr(0, 2) === 'tt'){\n            const options = {\n                method: 'GET',\n                url: 'https://imdb8.p.rapidapi.com/title/get-top-cast',\n                params: {tconst: useActorId.split('/')[0]},\n                headers: {\n                  'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n                  'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n                }\n              };\n              axios.request(options).then(function (response) {\n                  setuseTopBilled(response.data.slice(0, 6))\n                  console.log('Top build should be set')\n              }).catch(function (error) {\n                  console.error(error)\n              });\n            console.log('end of get top cast')\n            \n            }\n            }, [])\n     \n     \n    \n        // Get 6 top billed actors\n        const sleep = (milliseconds) => {\n            return new Promise(resolve => setTimeout(resolve, milliseconds))\n          }\n    \n        \n        // if(useTopBilled.length === 6){\n        useEffect(() => {\n          const getCharBio = async () => {\n            if(useTopBilled.length > 0){\n            console.log('starting char bio')\n            let topBilledList = []\n            let count = 6\n    \n            for(let character = 0; character < count; character++){\n                await sleep(500)\n                let characterId = useTopBilled[character].split('/')[2]\n                const options = {\n                    method: 'GET',\n                    url: 'https://imdb8.p.rapidapi.com/actors/get-bio',\n                    params: {nconst: characterId},\n                    headers: {\n                    'x-rapidapi-key': '1ddf0a8da3msh877010e622bf74dp10873cjsnd762a292965a',\n                    'x-rapidapi-host': 'imdb8.p.rapidapi.com'\n                    }\n                };\n    \n                axios.request(options).then(function (response) {\n                    console.log([response.data.name, response.data.image.url, response.data.id.split('/')[2]], 'request')\n                    topBilledList.push([response.data.name, response.data.image.url, response.data.id.split('/')[2]])\n                    \n                }).catch(function (error) {\n                    console.error(error);\n                });\n            \n                \n            }\n            await sleep(1000)\n            setuseRunTopSix(topBilledList)\n            setuseTopBilled([])\n            console.log('get bio done')\n            await sleep(1500)\n            setuseNotActor('selectedMovie')\n            }\n        }\n        getCharBio()\n        }, [useTopBilled])\n    \n\n    return (\n        <div id='loadingData'>\n            <img id='purpleKube' alt='processing spinner kube' src={ purpleKube }/>\n            <h1>Fectching your request</h1>\n        </div>\n    )\n}\n\nexport default TopSix",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":12,"column":12,"nodeType":"108","messageId":"109","endLine":12,"endColumn":20},{"ruleId":"106","severity":1,"message":"110","line":13,"column":12,"nodeType":"108","messageId":"109","endLine":13,"endColumn":26},{"ruleId":"106","severity":1,"message":"111","line":14,"column":12,"nodeType":"108","messageId":"109","endLine":14,"endColumn":23},{"ruleId":"106","severity":1,"message":"112","line":16,"column":12,"nodeType":"108","messageId":"109","endLine":16,"endColumn":25},{"ruleId":"106","severity":1,"message":"113","line":17,"column":12,"nodeType":"108","messageId":"109","endLine":17,"endColumn":27},{"ruleId":"106","severity":1,"message":"114","line":22,"column":12,"nodeType":"108","messageId":"109","endLine":22,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":96,"column":6,"nodeType":"117","endLine":96,"endColumn":18,"suggestions":"118"},{"ruleId":"106","severity":1,"message":"119","line":4,"column":101,"nodeType":"108","messageId":"109","endLine":4,"endColumn":110},{"ruleId":"106","severity":1,"message":"120","line":18,"column":12,"nodeType":"108","messageId":"109","endLine":18,"endColumn":24},{"ruleId":"106","severity":1,"message":"121","line":18,"column":26,"nodeType":"108","messageId":"109","endLine":18,"endColumn":41},{"ruleId":"106","severity":1,"message":"122","line":20,"column":12,"nodeType":"108","messageId":"109","endLine":20,"endColumn":22},{"ruleId":"106","severity":1,"message":"123","line":20,"column":24,"nodeType":"108","messageId":"109","endLine":20,"endColumn":37},{"ruleId":"106","severity":1,"message":"124","line":21,"column":26,"nodeType":"108","messageId":"109","endLine":21,"endColumn":41},{"ruleId":"106","severity":1,"message":"125","line":22,"column":12,"nodeType":"108","messageId":"109","endLine":22,"endColumn":30},{"ruleId":"106","severity":1,"message":"126","line":23,"column":12,"nodeType":"108","messageId":"109","endLine":23,"endColumn":21},{"ruleId":"106","severity":1,"message":"127","line":23,"column":23,"nodeType":"108","messageId":"109","endLine":23,"endColumn":35},{"ruleId":"106","severity":1,"message":"128","line":24,"column":12,"nodeType":"108","messageId":"109","endLine":24,"endColumn":23},{"ruleId":"106","severity":1,"message":"129","line":25,"column":12,"nodeType":"108","messageId":"109","endLine":25,"endColumn":25},{"ruleId":"106","severity":1,"message":"111","line":26,"column":12,"nodeType":"108","messageId":"109","endLine":26,"endColumn":23},{"ruleId":"106","severity":1,"message":"114","line":29,"column":12,"nodeType":"108","messageId":"109","endLine":29,"endColumn":26},{"ruleId":"106","severity":1,"message":"130","line":29,"column":28,"nodeType":"108","messageId":"109","endLine":29,"endColumn":45},{"ruleId":"115","severity":1,"message":"131","line":92,"column":8,"nodeType":"117","endLine":92,"endColumn":10,"suggestions":"132"},{"ruleId":"106","severity":1,"message":"133","line":115,"column":17,"nodeType":"108","messageId":"109","endLine":115,"endColumn":23},{"ruleId":"106","severity":1,"message":"134","line":131,"column":11,"nodeType":"108","messageId":"109","endLine":131,"endColumn":16},{"ruleId":"106","severity":1,"message":"135","line":10,"column":12,"nodeType":"108","messageId":"109","endLine":10,"endColumn":22},{"ruleId":"106","severity":1,"message":"128","line":11,"column":12,"nodeType":"108","messageId":"109","endLine":11,"endColumn":23},{"ruleId":"106","severity":1,"message":"122","line":12,"column":12,"nodeType":"108","messageId":"109","endLine":12,"endColumn":22},{"ruleId":"106","severity":1,"message":"123","line":12,"column":24,"nodeType":"108","messageId":"109","endLine":12,"endColumn":37},{"ruleId":"106","severity":1,"message":"120","line":13,"column":12,"nodeType":"108","messageId":"109","endLine":13,"endColumn":24},{"ruleId":"106","severity":1,"message":"121","line":13,"column":26,"nodeType":"108","messageId":"109","endLine":13,"endColumn":41},{"ruleId":"106","severity":1,"message":"126","line":14,"column":12,"nodeType":"108","messageId":"109","endLine":14,"endColumn":21},{"ruleId":"106","severity":1,"message":"127","line":14,"column":23,"nodeType":"108","messageId":"109","endLine":14,"endColumn":35},{"ruleId":"106","severity":1,"message":"125","line":15,"column":12,"nodeType":"108","messageId":"109","endLine":15,"endColumn":30},{"ruleId":"106","severity":1,"message":"136","line":15,"column":32,"nodeType":"108","messageId":"109","endLine":15,"endColumn":53},{"ruleId":"106","severity":1,"message":"137","line":16,"column":12,"nodeType":"108","messageId":"109","endLine":16,"endColumn":24},{"ruleId":"106","severity":1,"message":"124","line":16,"column":26,"nodeType":"108","messageId":"109","endLine":16,"endColumn":41},{"ruleId":"106","severity":1,"message":"138","line":17,"column":12,"nodeType":"108","messageId":"109","endLine":17,"endColumn":24},{"ruleId":"106","severity":1,"message":"139","line":17,"column":26,"nodeType":"108","messageId":"109","endLine":17,"endColumn":41},{"ruleId":"106","severity":1,"message":"140","line":18,"column":12,"nodeType":"108","messageId":"109","endLine":18,"endColumn":22},{"ruleId":"106","severity":1,"message":"126","line":14,"column":12,"nodeType":"108","messageId":"109","endLine":14,"endColumn":21},{"ruleId":"106","severity":1,"message":"127","line":14,"column":23,"nodeType":"108","messageId":"109","endLine":14,"endColumn":35},{"ruleId":"106","severity":1,"message":"125","line":15,"column":12,"nodeType":"108","messageId":"109","endLine":15,"endColumn":30},{"ruleId":"106","severity":1,"message":"136","line":15,"column":32,"nodeType":"108","messageId":"109","endLine":15,"endColumn":53},{"ruleId":"106","severity":1,"message":"137","line":16,"column":12,"nodeType":"108","messageId":"109","endLine":16,"endColumn":24},{"ruleId":"106","severity":1,"message":"128","line":17,"column":12,"nodeType":"108","messageId":"109","endLine":17,"endColumn":23},{"ruleId":"106","severity":1,"message":"141","line":18,"column":24,"nodeType":"108","messageId":"109","endLine":18,"endColumn":37},{"ruleId":"115","severity":1,"message":"142","line":44,"column":16,"nodeType":"117","endLine":44,"endColumn":18,"suggestions":"143"},{"ruleId":"115","severity":1,"message":"144","line":94,"column":12,"nodeType":"117","endLine":94,"endColumn":26,"suggestions":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'useImage' is assigned a value but never used.","Identifier","unusedVar","'useDisplayname' is assigned a value but never used.","'useKnownFor' is assigned a value but never used.","'useIsNotActor' is assigned a value but never used.","'useResponseData' is assigned a value but never used.","'useActorSelect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setuseActorBio', 'setuseActorFilmography', 'setuseActorImages', 'setuseActorSelect', and 'useDisplayName'. Either include them or remove the dependency array.","ArrayExpression",["148"],"'trailerId' is defined but never used.","'useTopBilled' is assigned a value but never used.","'setuseTopBilled' is assigned a value but never used.","'useRunShow' is assigned a value but never used.","'setuseRunShow' is assigned a value but never used.","'setuseRunTopSix' is assigned a value but never used.","'useTopDisplayReady' is assigned a value but never used.","'useTopSix' is assigned a value but never used.","'setuseTopSix' is assigned a value but never used.","'useNotActor' is assigned a value but never used.","'useSearchName' is assigned a value but never used.","'setuseActorSelect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setuseDisplayName', 'setuseGenres', 'setuseImage', 'setusePlot', 'setuseRated', 'setuseRatedBecause', 'setuseRating', 'setuseSearchName', 'setuseTrailer', 'useActorId', 'useDisplayName', and 'useResponseData.d'. Either include them or remove the dependency array.",["149"],"'charId' is assigned a value but never used.","'sleep' is assigned a value but never used.","'useActorId' is assigned a value but never used.","'setuseTopDisplayReady' is assigned a value but never used.","'useRunTopSix' is assigned a value but never used.","'useTrailerId' is assigned a value but never used.","'setuseTrailerId' is assigned a value but never used.","'useTrailer' is assigned a value but never used.","'setuseActorId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setuseTopBilled' and 'useActorId'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'setuseNotActor', 'setuseRunTopSix', and 'setuseTopBilled'. Either include them or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [setuseActorBio, setuseActorFilmography, setuseActorImages, setuseActorSelect, useActorId, useDisplayName]",{"range":"160","text":"161"},"Update the dependencies array to be: [setuseDisplayName, setuseGenres, setuseImage, setusePlot, setuseRated, setuseRatedBecause, setuseRating, setuseSearchName, setuseTrailer, useActorId, useDisplayName, useResponseData.d]",{"range":"162","text":"163"},"Update the dependencies array to be: [setuseTopBilled, useActorId]",{"range":"164","text":"165"},"Update the dependencies array to be: [setuseNotActor, setuseRunTopSix, setuseTopBilled, useTopBilled]",{"range":"166","text":"167"},[3124,3136],"[setuseActorBio, setuseActorFilmography, setuseActorImages, setuseActorSelect, useActorId, useDisplayName]",[4095,4097],"[setuseDisplayName, setuseGenres, setuseImage, setusePlot, setuseRated, setuseRatedBecause, setuseRating, setuseSearchName, setuseTrailer, useActorId, useDisplayName, useResponseData.d]",[1677,1679],"[setuseTopBilled, useActorId]",[3489,3503],"[setuseNotActor, setuseRunTopSix, setuseTopBilled, useTopBilled]"]